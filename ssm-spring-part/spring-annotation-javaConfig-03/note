该项目主要任务：
1、编写配置类SpringConfig替换spring-annotation-xml-02模块中spring03.xml，
   在测试类SpringConfigClassTest验证
2、使用spring-test整合测试环境，编写测试类SpringIntegrationTest，验证

/************** 任务1  配置类**************************************/
//1 这是一个配置类，作用类型xml配置文件
@Configuration
//2 <context:component-scan base-package="com.javaee.annotaion.dao.Impl,com.javaee.annotaion.service.Impl"/>
@ComponentScan(basePackages = {"com.javaee.annotaion.dao.Impl","com.javaee.annotaion.service.Impl"})
//3 <context:property-placeholder location="classpath:jdbc.properties"/>
@PropertySource("classpath:jdbc.properties")
public class SpringConfig {
//        <!--3 第三方依赖中的类，无法通过注解，只能在xml配置文件中通过bean加入Spring容器-->
//    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
//        <!--通过${}读取属性文件的值-->
//        <property name="url" value="${mysql.url}"/>
//        <property name="driverClassName" value="${mysql.driverClassName}"/>
//        <property name="username" value="${mysql.username}" />
//        <property name="password" value="${mysql.password}" />
//    </bean>
    @Bean
    public DruidDataSource druidDataSource(@Value("${mysql.url}") String url,
                                           @Value("${mysql.driverClassName}")String driverClassName,
                                           @Value("${mysql.username}")String username,
                                           @Value("${mysql.password}")String password){
        DruidDataSource druidDataSource = new DruidDataSource();
        druidDataSource.setUrl(url);
        druidDataSource.setDriverClassName(driverClassName);
        druidDataSource.setUsername(username);
        druidDataSource.setPassword(password);
        return druidDataSource;
    }

//    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
//        <property name="dataSource" ref="druidDataSource" />
//    </bean>
    @Bean
    public JdbcTemplate jdbcTemplate(DruidDataSource druidDataSource){
        JdbcTemplate jdbcTemplate = new JdbcTemplate();
        jdbcTemplate.setDataSource(druidDataSource);
        return jdbcTemplate;
    }
}

/************** 任务1  测试类**************************************/
    @Test
    public void testSpringAnnotaionConfig04() {
        //1 根据SpringConfig类创建spring容器
        ApplicationContext applicationContext =
                new AnnotationConfigApplicationContext(SpringConfig.class);
        //2 从spring容器中获取bean
        StudentService studentService = applicationContext.getBean(StudentService.class);
        studentService.addStudent(stu);
    }

/*****************任务2 使用spring-test整合测试环境***************************************/
先引入依赖
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-test</artifactId>
    <version>6.1.12</version>
</dependency>

//@SpringJUnitConfig(locations = {"classpath:spring01.xml"})
@SpringJUnitConfig(value = {SpringConfig.class}) //指定配置类
public class SpringIntegrationTest {
    private Student stu;
    @BeforeEach
    public void before(){
        stu=new Student(); //测试数据
        stu.setNum("22302091010");
        stu.setName("徐杰");
        stu.setAge(20);
        stu.setIntro("2022级软件工程1班学生");
    }

    @Test
    public void testAddStudent(){

    }
